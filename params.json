{"name":"Captcha Lógico","tagline":"API para implementação de um \"Captcha\" com perguntas lógicas em português.","body":"API para implementação de um \"Captcha\" com perguntas lógicas em português, ao invés de imagens e textos. Isso possibilita a implementação de acessibilidade e melhoria na usabilidade do sistema. Será criado em tela uma questão com 4 respostas objetivas, com somente 1 correta.\r\n\r\nÉ utilizado um banco de dados leve interno (hsqldb memory) para retornar a pergunta e as respostas. As perguntas são carregadas uma única vez neste banco, quando o servidor de aplicação sobe.\r\n\r\nOs fontes foram propositadamente escrito e voltado para português BR.\r\n\r\nQuantidade de perguntas diferentes cadastradas: 20.\r\n\r\nEncoding: UTF-8.\r\n\r\nLicença\r\n-------\r\n\r\nO projeto foi concebido na licença Mozilla 2.0, ou seja, pode-se utilizar o jar em qualquer projeto, comercial ou não. Mas alterações na API devem ser obrigatoriamente disponibilizada na mesma licença.\r\n\r\nÉ OpenSource, e como tal, qualquer um pode melhorar o código, refatorando, corrigindo ou adicionando novas funcionalidades.\r\n\r\nMaven\r\n-----\r\n\r\nEstá publicado no Maven Central. Então basta configurar a dependência conforme abaixo.\r\n\r\n\t<dependency>\r\n\t\t<groupId>com.jopss</groupId>\r\n\t\t<artifactId>captcha-logico</artifactId>\r\n\t\t<version>1.0</version>\r\n\t</dependency>\r\n\t\r\nUso\r\n===\r\n\r\nPara utilizar o Captcha Logico na sua aplicação, basta configurar a dependência maven no seu projeto, utilizar a classe \"CaptchaLogico\" para carregar, criar as perguntas e referenciar a tag html na página web.\r\n\r\nControlador/Serviço\r\n-------------------\r\n\r\nNo seu controlador ou serviço web você deve carregar uma pergunta e as respostas na requisição:\r\n\r\n\tCaptchaLogico.carregar(session, request).criarNovaPerguntaRespostas();\r\n\r\nIsso irá fazer com que guarde o valor real da resposta em sessão no servidor, e retorna parâmetros da requisição (escopo de Request) com os valores da pergunta e respostas. Ao retornar no submit da sua página, verifique a resposta digitada com o valor guardado na sessão com:\r\n\r\n\tCaptchaLogico.carregar(session, request).validarRespostaUsuario( form.getRespostaUsuario() );\r\n\t\r\nEste métod é 'void', e caso a resposta estiver errada, lancará uma 'CaptchaLogicoException' (checked exception). Assim você poderá tratar o erro conforme o seu caso.\r\n \r\nAo retornar do submit (controlador para a página), lembre-se de recarregar os dados da requisição com novas perguntas.\r\n\t\r\nHTML/JSP\r\n--------\r\n\r\nEm tela deve criar referenciar o diretorio de tags da API no cabeçalho na página:\r\n\r\n\t<%@ taglib prefix=\"cp-componentes\" tagdir=\"/WEB-INF/tags/cp-componentes\"%>\r\n\t\r\nE em sua página, posicionar a tag que ira exibir as perguntas:\r\n\r\n\t<cp-componentes:captcha-logico nameRadiosRespostas=\"respostaCaptcha\" />\r\n\r\nO HTML gerado não irá conter nenhum tipo de CSS ou estilo. Cabe a cada projeto gerar o layout adequado.\r\nOs parâmetros possíveis para esta tag são:\r\n\t\r\n* nameRadiosRespostas: Atributo a ser inserido no 'name' de todos os radios de respostas. Normalmente ele deve referenciar algum atributo do 'backend bean' do formulario a receber o valor da resposta selecionada.\r\n* classDivConteudo: Classe CSS para estilizacao do div content. Este div esta em volta de todos os componentes.\r\n* classPergunta: Classe CSS para o paragrado (p) da pergunta. \r\n* classSpanRespostas: Classe CSS para o span das respostas. Dentro deste estarão os radios com as respostas.\r\n\r\nExemplo:\r\n\r\n![exemplo](https://github.com/jopss/captcha-logico/blob/master/sample.png)\r\n\r\nStatus\r\n------\r\n\r\nFinalizado primeira release. Em manutenção.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}